output_v main_v(float4 position:POSITION,
                float3 normal : NORMAL,

                out float3 color : COLOR,
                out float4 oPosition : POSITION,
                out float3 halfDirection : TEXCOORD0,
                out float3 oNormal : TEXCOORD1,
                uniform float4x4 modelViewProj,
                uniform float3 globalAmbient,
                uniform float3 lightColor,
                uniform float3 lightPosition,
                uniform float3 eyePosition,
                uniform float3 Ke,
                uniform float3 Ka,
                uniform float3 Kd,
                )
                
{

    oPosition = mul(modelViewProj, position);
    float3 P = position.xyz;
    float3 N = normal;

    // emissive term
    float3 emissive = Ke;

    // ambient term
    float3 ambient = Ka * globalAmbient;

    // diffuse term
    float3 L = normalize(lightPosition - P);
    float diffuseCoef = max(dot(N, L), 0);
    float3 diffuse = Kd * lightColor * diffuseCoef;

    // halfDirection and normal of specular term
    float3 V = normalize(eyePosition - P);
    float3 H = normalize(L + V);
    halfDirection = H;
    oNormal = normal;

    color = emissive + ambient + diffuse;
    color.w = 1;
    return OUT;
}


