float3 ComputeLighting(float3 lightPos,
                       float3 lightColor,
                       float3 eyePos,
                       float shininess,
                       float3 position,  // In object space
                       float3 normal    // In object space
                       )    
{
  float3 lightDirection = lightPos - position;
  float3 lightDirNorm = normalize(lightDirection);
  float3 eyeDirection = eyePos - position;
  float3 eyeDirNorm = normalize(eyeDirection);
  float3 halfAngle = normalize(lightDirNorm + eyeDirNorm);
  float diffuse = max(0.0,dot(lightDirNorm, normal));
  float specular = pow(max(0.0,dot(halfAngle, normal)),
                       shininess);
  return lightColor * (diffuse + specular);
}

void main_v(float3 positionA: POSITION, // shader dosen't know whether the last component of POSITION is 1 or not, it is guaranteed by the client
			float3 normalA: NORMAL,
            float3 positionB : TEXCOORD1,
            float3 normalB : TEXCOORD2,
            float2 texCoord : TEXCOORD0,

            out float4 oPosition: POSITION,
            out float2 oTexCoord : TEXCOORD0,
            out float4 color : COLOR,

            uniform float3 eyePos,
            uniform float3 lightPos, // object space
            uniform float3 lightColor, // object space
            uniform float shininess,
            uniform float keyFrameBlend,
            uniform float4x4  modelViewProj
			)
{
    float3 position = lerp(positionA, positionB, keyFrameBlend);
    float3 blendNormal = lerp(normalA, normalB, keyFrameBlend);
    float3 normal = normalize(blendNormal);
    oPosition = mul(modelViewProj, float4(position,1));
    oTexCoord = texCoord;
    color.xyz = ComputeLighting(lightPos,lightColor,eyePos,shininess,position,normal);
    color.w = 1;
}